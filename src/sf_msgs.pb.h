/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0 */

#ifndef PB_PROTO_FILES_SF_MSGS_PB_H_INCLUDED
#define PB_PROTO_FILES_SF_MSGS_PB_H_INCLUDED
#include "nanopb/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _GNSSType {
    GNSSType_GPS = 0,
    GNSSType_GLONASS = 1,
    GNSSType_GALILEO = 2,
    GNSSType_BeiDou = 3
} GNSSType;

typedef enum _CellType {
    CellType_CELL_UNKNOWN = 0,
    CellType_GSM = 1,
    CellType_CDMA = 2,
    CellType_LTE = 3,
    CellType_WCDMA = 4
} CellType;

typedef enum _BleType {
    BleType_BLE_UNKNOWN = 0,
    BleType_IBEACON = 1
} BleType;

/* Struct definitions */
typedef struct _GNSS {
    int64_t t;
    float latitude;
    float longitude;
    float altitude;
    float heading;
    float speed;
    float accuracy;
    GNSSType type;
} GNSS;

typedef struct _Data4D {
    int64_t t;
    float w;
    float x;
    float y;
    float z;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
} Data4D;

typedef struct _Data1D {
    int64_t t;
    float x;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} Data1D;

typedef struct _Data2D {
    int64_t t;
    float x;
    float y;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} Data2D;

typedef struct _Data3D {
    int64_t t;
    float x;
    float y;
    float z;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} Data3D;

typedef struct _Data6D {
    int64_t t;
    float x;
    float y;
    float z;
    float bx;
    float by;
    float bz;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} Data6D;

typedef struct _DataBleRss {
    int64_t t;
    int32_t rss;
    pb_callback_t mac;
    BleType type;
    pb_callback_t name;
    pb_callback_t data;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} DataBleRss;

typedef struct _DataCellRss {
    int64_t t;
    int32_t rss;
    int32_t mcc;
    int32_t mnc;
    int32_t lac;
    CellType network_type;
    int32_t ci;
    int32_t psc_pci;
    pb_callback_t neighbor;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} DataCellRss;

typedef struct _DataND {
    int64_t t;
    pb_callback_t x;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} DataND;

typedef struct _DataWifiRss {
    int64_t t;
    int32_t rss;
    int32_t freq;
    pb_callback_t ssid;
    pb_callback_t bssid;
    pb_callback_t mac;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} DataWifiRss;

typedef struct _ReccoRss {
    int64_t t;
    float metric;
    int32_t txmode;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} ReccoRss;

typedef struct _TempPhCond {
    int64_t t;
    float pH;
    float temp;
    int32_t cond;
    int32_t errors;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
} TempPhCond;

typedef struct _WrapperData {
    int64_t t;
    pb_callback_t acc;
    pb_callback_t gyr;
    pb_callback_t mag;
    pb_callback_t raw_gyr;
    pb_callback_t raw_mag;
    pb_callback_t orient;
    pb_callback_t gnss;
    pb_callback_t ble_rss;
    pb_callback_t cell_rss;
    pb_callback_t wifi_rss;
    pb_callback_t recco_rss;
    pb_callback_t light;
    pb_callback_t pressure;
    pb_callback_t proximity;
    pb_callback_t temp;
    bool has_position;
    GNSS position;
    uint32_t sensor_id;
    bool has_orientation;
    Data4D orientation;
    pb_callback_t tempphcond;
    pb_callback_t generic1D;
    pb_callback_t generic2D;
    pb_callback_t generic3D;
    pb_callback_t generic4D;
    pb_callback_t generic6D;
    pb_callback_t genericND;
} WrapperData;


/* Helper constants for enums */
#define _GNSSType_MIN GNSSType_GPS
#define _GNSSType_MAX GNSSType_BeiDou
#define _GNSSType_ARRAYSIZE ((GNSSType)(GNSSType_BeiDou+1))

#define _CellType_MIN CellType_CELL_UNKNOWN
#define _CellType_MAX CellType_WCDMA
#define _CellType_ARRAYSIZE ((CellType)(CellType_WCDMA+1))

#define _BleType_MIN BleType_BLE_UNKNOWN
#define _BleType_MAX BleType_IBEACON
#define _BleType_ARRAYSIZE ((BleType)(BleType_IBEACON+1))


/* Initializer values for message structs */
#define GNSS_init_default                        {0, 0, 0, 0, 0, 0, 0, _GNSSType_MIN}
#define Data1D_init_default                      {0, 0, false, GNSS_init_default, 0, false, Data4D_init_default}
#define Data2D_init_default                      {0, 0, 0, false, GNSS_init_default, 0, false, Data4D_init_default}
#define Data3D_init_default                      {0, 0, 0, 0, false, GNSS_init_default, 0, false, Data4D_init_default}
#define Data4D_init_default                      {0, 0, 0, 0, 0, false, GNSS_init_default, 0}
#define Data6D_init_default                      {0, 0, 0, 0, 0, 0, 0, false, GNSS_init_default, 0, false, Data4D_init_default}
#define DataND_init_default                      {0, {{NULL}, NULL}, false, GNSS_init_default, 0, false, Data4D_init_default}
#define DataCellRss_init_default                 {0, 0, 0, 0, 0, _CellType_MIN, 0, 0, {{NULL}, NULL}, false, GNSS_init_default, 0, false, Data4D_init_default}
#define DataBleRss_init_default                  {0, 0, {{NULL}, NULL}, _BleType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, GNSS_init_default, 0, false, Data4D_init_default}
#define DataWifiRss_init_default                 {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, GNSS_init_default, 0, false, Data4D_init_default}
#define ReccoRss_init_default                    {0, 0, 0, false, GNSS_init_default, 0, false, Data4D_init_default}
#define TempPhCond_init_default                  {0, 0, 0, 0, 0, false, GNSS_init_default, 0, false, Data4D_init_default}
#define WrapperData_init_default                 {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, GNSS_init_default, 0, false, Data4D_init_default, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define GNSS_init_zero                           {0, 0, 0, 0, 0, 0, 0, _GNSSType_MIN}
#define Data1D_init_zero                         {0, 0, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define Data2D_init_zero                         {0, 0, 0, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define Data3D_init_zero                         {0, 0, 0, 0, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define Data4D_init_zero                         {0, 0, 0, 0, 0, false, GNSS_init_zero, 0}
#define Data6D_init_zero                         {0, 0, 0, 0, 0, 0, 0, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define DataND_init_zero                         {0, {{NULL}, NULL}, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define DataCellRss_init_zero                    {0, 0, 0, 0, 0, _CellType_MIN, 0, 0, {{NULL}, NULL}, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define DataBleRss_init_zero                     {0, 0, {{NULL}, NULL}, _BleType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define DataWifiRss_init_zero                    {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define ReccoRss_init_zero                       {0, 0, 0, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define TempPhCond_init_zero                     {0, 0, 0, 0, 0, false, GNSS_init_zero, 0, false, Data4D_init_zero}
#define WrapperData_init_zero                    {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, GNSS_init_zero, 0, false, Data4D_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define GNSS_t_tag                               1
#define GNSS_latitude_tag                        2
#define GNSS_longitude_tag                       3
#define GNSS_altitude_tag                        4
#define GNSS_heading_tag                         5
#define GNSS_speed_tag                           6
#define GNSS_accuracy_tag                        7
#define GNSS_type_tag                            8
#define Data4D_t_tag                             1
#define Data4D_w_tag                             2
#define Data4D_x_tag                             3
#define Data4D_y_tag                             4
#define Data4D_z_tag                             5
#define Data4D_position_tag                      10
#define Data4D_sensor_id_tag                     11
#define Data1D_t_tag                             1
#define Data1D_x_tag                             2
#define Data1D_position_tag                      10
#define Data1D_sensor_id_tag                     11
#define Data1D_orientation_tag                   12
#define Data2D_t_tag                             1
#define Data2D_x_tag                             2
#define Data2D_y_tag                             3
#define Data2D_position_tag                      10
#define Data2D_sensor_id_tag                     11
#define Data2D_orientation_tag                   12
#define Data3D_t_tag                             1
#define Data3D_x_tag                             2
#define Data3D_y_tag                             3
#define Data3D_z_tag                             4
#define Data3D_position_tag                      10
#define Data3D_sensor_id_tag                     11
#define Data3D_orientation_tag                   12
#define Data6D_t_tag                             1
#define Data6D_x_tag                             2
#define Data6D_y_tag                             3
#define Data6D_z_tag                             4
#define Data6D_bx_tag                            5
#define Data6D_by_tag                            6
#define Data6D_bz_tag                            7
#define Data6D_position_tag                      10
#define Data6D_sensor_id_tag                     11
#define Data6D_orientation_tag                   12
#define DataBleRss_t_tag                         1
#define DataBleRss_rss_tag                       2
#define DataBleRss_mac_tag                       3
#define DataBleRss_type_tag                      4
#define DataBleRss_name_tag                      5
#define DataBleRss_data_tag                      6
#define DataBleRss_position_tag                  10
#define DataBleRss_sensor_id_tag                 11
#define DataBleRss_orientation_tag               12
#define DataCellRss_t_tag                        1
#define DataCellRss_rss_tag                      2
#define DataCellRss_mcc_tag                      3
#define DataCellRss_mnc_tag                      4
#define DataCellRss_lac_tag                      5
#define DataCellRss_network_type_tag             6
#define DataCellRss_ci_tag                       7
#define DataCellRss_psc_pci_tag                  8
#define DataCellRss_neighbor_tag                 9
#define DataCellRss_position_tag                 10
#define DataCellRss_sensor_id_tag                11
#define DataCellRss_orientation_tag              12
#define DataND_t_tag                             1
#define DataND_x_tag                             2
#define DataND_position_tag                      10
#define DataND_sensor_id_tag                     11
#define DataND_orientation_tag                   12
#define DataWifiRss_t_tag                        1
#define DataWifiRss_rss_tag                      2
#define DataWifiRss_freq_tag                     3
#define DataWifiRss_ssid_tag                     4
#define DataWifiRss_bssid_tag                    5
#define DataWifiRss_mac_tag                      6
#define DataWifiRss_position_tag                 10
#define DataWifiRss_sensor_id_tag                11
#define DataWifiRss_orientation_tag              12
#define ReccoRss_t_tag                           1
#define ReccoRss_metric_tag                      2
#define ReccoRss_txmode_tag                      3
#define ReccoRss_position_tag                    10
#define ReccoRss_sensor_id_tag                   11
#define ReccoRss_orientation_tag                 12
#define TempPhCond_t_tag                         1
#define TempPhCond_pH_tag                        2
#define TempPhCond_temp_tag                      3
#define TempPhCond_cond_tag                      4
#define TempPhCond_errors_tag                    5
#define TempPhCond_position_tag                  10
#define TempPhCond_sensor_id_tag                 11
#define TempPhCond_orientation_tag               12
#define WrapperData_t_tag                        1
#define WrapperData_acc_tag                      2
#define WrapperData_gyr_tag                      3
#define WrapperData_mag_tag                      4
#define WrapperData_raw_gyr_tag                  6
#define WrapperData_raw_mag_tag                  7
#define WrapperData_orient_tag                   8
#define WrapperData_gnss_tag                     9
#define WrapperData_ble_rss_tag                  10
#define WrapperData_cell_rss_tag                 11
#define WrapperData_wifi_rss_tag                 12
#define WrapperData_recco_rss_tag                13
#define WrapperData_light_tag                    16
#define WrapperData_pressure_tag                 17
#define WrapperData_proximity_tag                18
#define WrapperData_temp_tag                     19
#define WrapperData_position_tag                 20
#define WrapperData_sensor_id_tag                21
#define WrapperData_orientation_tag              22
#define WrapperData_tempphcond_tag               23
#define WrapperData_generic1D_tag                30
#define WrapperData_generic2D_tag                31
#define WrapperData_generic3D_tag                32
#define WrapperData_generic4D_tag                33
#define WrapperData_generic6D_tag                34
#define WrapperData_genericND_tag                35

/* Struct field encoding specification for nanopb */
#define GNSS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    latitude,          2) \
X(a, STATIC,   SINGULAR, FLOAT,    longitude,         3) \
X(a, STATIC,   SINGULAR, FLOAT,    altitude,          4) \
X(a, STATIC,   SINGULAR, FLOAT,    heading,           5) \
X(a, STATIC,   SINGULAR, FLOAT,    speed,             6) \
X(a, STATIC,   SINGULAR, FLOAT,    accuracy,          7) \
X(a, STATIC,   SINGULAR, UENUM,    type,              8)
#define GNSS_CALLBACK NULL
#define GNSS_DEFAULT NULL

#define Data1D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define Data1D_CALLBACK NULL
#define Data1D_DEFAULT NULL
#define Data1D_position_MSGTYPE GNSS
#define Data1D_orientation_MSGTYPE Data4D

#define Data2D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define Data2D_CALLBACK NULL
#define Data2D_DEFAULT NULL
#define Data2D_position_MSGTYPE GNSS
#define Data2D_orientation_MSGTYPE Data4D

#define Data3D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 3) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define Data3D_CALLBACK NULL
#define Data3D_DEFAULT NULL
#define Data3D_position_MSGTYPE GNSS
#define Data3D_orientation_MSGTYPE Data4D

#define Data4D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    w,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 3) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 4) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11)
#define Data4D_CALLBACK NULL
#define Data4D_DEFAULT NULL
#define Data4D_position_MSGTYPE GNSS

#define Data6D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 3) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 4) \
X(a, STATIC,   SINGULAR, FLOAT,    bx,                5) \
X(a, STATIC,   SINGULAR, FLOAT,    by,                6) \
X(a, STATIC,   SINGULAR, FLOAT,    bz,                7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define Data6D_CALLBACK NULL
#define Data6D_DEFAULT NULL
#define Data6D_position_MSGTYPE GNSS
#define Data6D_orientation_MSGTYPE Data4D

#define DataND_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, CALLBACK, REPEATED, FLOAT,    x,                 2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define DataND_CALLBACK pb_default_field_callback
#define DataND_DEFAULT NULL
#define DataND_position_MSGTYPE GNSS
#define DataND_orientation_MSGTYPE Data4D

#define DataCellRss_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, INT32,    rss,               2) \
X(a, STATIC,   SINGULAR, INT32,    mcc,               3) \
X(a, STATIC,   SINGULAR, INT32,    mnc,               4) \
X(a, STATIC,   SINGULAR, INT32,    lac,               5) \
X(a, STATIC,   SINGULAR, UENUM,    network_type,      6) \
X(a, STATIC,   SINGULAR, INT32,    ci,                7) \
X(a, STATIC,   SINGULAR, INT32,    psc_pci,           8) \
X(a, CALLBACK, REPEATED, MESSAGE,  neighbor,          9) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define DataCellRss_CALLBACK pb_default_field_callback
#define DataCellRss_DEFAULT NULL
#define DataCellRss_neighbor_MSGTYPE DataCellRss
#define DataCellRss_position_MSGTYPE GNSS
#define DataCellRss_orientation_MSGTYPE Data4D

#define DataBleRss_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, INT32,    rss,               2) \
X(a, CALLBACK, SINGULAR, STRING,   mac,               3) \
X(a, STATIC,   SINGULAR, UENUM,    type,              4) \
X(a, CALLBACK, SINGULAR, STRING,   name,              5) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define DataBleRss_CALLBACK pb_default_field_callback
#define DataBleRss_DEFAULT NULL
#define DataBleRss_position_MSGTYPE GNSS
#define DataBleRss_orientation_MSGTYPE Data4D

#define DataWifiRss_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, INT32,    rss,               2) \
X(a, STATIC,   SINGULAR, INT32,    freq,              3) \
X(a, CALLBACK, SINGULAR, STRING,   ssid,              4) \
X(a, CALLBACK, SINGULAR, STRING,   bssid,             5) \
X(a, CALLBACK, SINGULAR, STRING,   mac,               6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define DataWifiRss_CALLBACK pb_default_field_callback
#define DataWifiRss_DEFAULT NULL
#define DataWifiRss_position_MSGTYPE GNSS
#define DataWifiRss_orientation_MSGTYPE Data4D

#define ReccoRss_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    metric,            2) \
X(a, STATIC,   SINGULAR, INT32,    txmode,            3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define ReccoRss_CALLBACK NULL
#define ReccoRss_DEFAULT NULL
#define ReccoRss_position_MSGTYPE GNSS
#define ReccoRss_orientation_MSGTYPE Data4D

#define TempPhCond_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    pH,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    temp,              3) \
X(a, STATIC,   SINGULAR, INT32,    cond,              4) \
X(a, STATIC,   SINGULAR, INT32,    errors,            5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         10) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      12)
#define TempPhCond_CALLBACK NULL
#define TempPhCond_DEFAULT NULL
#define TempPhCond_position_MSGTYPE GNSS
#define TempPhCond_orientation_MSGTYPE Data4D

#define WrapperData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    t,                 1) \
X(a, CALLBACK, REPEATED, MESSAGE,  acc,               2) \
X(a, CALLBACK, REPEATED, MESSAGE,  gyr,               3) \
X(a, CALLBACK, REPEATED, MESSAGE,  mag,               4) \
X(a, CALLBACK, REPEATED, MESSAGE,  raw_gyr,           6) \
X(a, CALLBACK, REPEATED, MESSAGE,  raw_mag,           7) \
X(a, CALLBACK, REPEATED, MESSAGE,  orient,            8) \
X(a, CALLBACK, REPEATED, MESSAGE,  gnss,              9) \
X(a, CALLBACK, REPEATED, MESSAGE,  ble_rss,          10) \
X(a, CALLBACK, REPEATED, MESSAGE,  cell_rss,         11) \
X(a, CALLBACK, REPEATED, MESSAGE,  wifi_rss,         12) \
X(a, CALLBACK, REPEATED, MESSAGE,  recco_rss,        13) \
X(a, CALLBACK, REPEATED, MESSAGE,  light,            16) \
X(a, CALLBACK, REPEATED, MESSAGE,  pressure,         17) \
X(a, CALLBACK, REPEATED, MESSAGE,  proximity,        18) \
X(a, CALLBACK, REPEATED, MESSAGE,  temp,             19) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         20) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,        21) \
X(a, STATIC,   OPTIONAL, MESSAGE,  orientation,      22) \
X(a, CALLBACK, REPEATED, MESSAGE,  tempphcond,       23) \
X(a, CALLBACK, REPEATED, MESSAGE,  generic1D,        30) \
X(a, CALLBACK, REPEATED, MESSAGE,  generic2D,        31) \
X(a, CALLBACK, REPEATED, MESSAGE,  generic3D,        32) \
X(a, CALLBACK, REPEATED, MESSAGE,  generic4D,        33) \
X(a, CALLBACK, REPEATED, MESSAGE,  generic6D,        34) \
X(a, CALLBACK, REPEATED, MESSAGE,  genericND,        35)
#define WrapperData_CALLBACK pb_default_field_callback
#define WrapperData_DEFAULT NULL
#define WrapperData_acc_MSGTYPE Data3D
#define WrapperData_gyr_MSGTYPE Data3D
#define WrapperData_mag_MSGTYPE Data3D
#define WrapperData_raw_gyr_MSGTYPE Data6D
#define WrapperData_raw_mag_MSGTYPE Data6D
#define WrapperData_orient_MSGTYPE Data4D
#define WrapperData_gnss_MSGTYPE GNSS
#define WrapperData_ble_rss_MSGTYPE DataBleRss
#define WrapperData_cell_rss_MSGTYPE DataCellRss
#define WrapperData_wifi_rss_MSGTYPE DataWifiRss
#define WrapperData_recco_rss_MSGTYPE ReccoRss
#define WrapperData_light_MSGTYPE Data1D
#define WrapperData_pressure_MSGTYPE Data1D
#define WrapperData_proximity_MSGTYPE Data1D
#define WrapperData_temp_MSGTYPE Data1D
#define WrapperData_position_MSGTYPE GNSS
#define WrapperData_orientation_MSGTYPE Data4D
#define WrapperData_tempphcond_MSGTYPE TempPhCond
#define WrapperData_generic1D_MSGTYPE Data1D
#define WrapperData_generic2D_MSGTYPE Data2D
#define WrapperData_generic3D_MSGTYPE Data3D
#define WrapperData_generic4D_MSGTYPE Data4D
#define WrapperData_generic6D_MSGTYPE Data4D
#define WrapperData_genericND_MSGTYPE DataND

extern const pb_msgdesc_t GNSS_msg;
extern const pb_msgdesc_t Data1D_msg;
extern const pb_msgdesc_t Data2D_msg;
extern const pb_msgdesc_t Data3D_msg;
extern const pb_msgdesc_t Data4D_msg;
extern const pb_msgdesc_t Data6D_msg;
extern const pb_msgdesc_t DataND_msg;
extern const pb_msgdesc_t DataCellRss_msg;
extern const pb_msgdesc_t DataBleRss_msg;
extern const pb_msgdesc_t DataWifiRss_msg;
extern const pb_msgdesc_t ReccoRss_msg;
extern const pb_msgdesc_t TempPhCond_msg;
extern const pb_msgdesc_t WrapperData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define GNSS_fields &GNSS_msg
#define Data1D_fields &Data1D_msg
#define Data2D_fields &Data2D_msg
#define Data3D_fields &Data3D_msg
#define Data4D_fields &Data4D_msg
#define Data6D_fields &Data6D_msg
#define DataND_fields &DataND_msg
#define DataCellRss_fields &DataCellRss_msg
#define DataBleRss_fields &DataBleRss_msg
#define DataWifiRss_fields &DataWifiRss_msg
#define ReccoRss_fields &ReccoRss_msg
#define TempPhCond_fields &TempPhCond_msg
#define WrapperData_fields &WrapperData_msg

/* Maximum encoded size of messages (where known) */
#define GNSS_size                                43
#define Data1D_size                              151
#define Data2D_size                              156
#define Data3D_size                              161
#define Data4D_size                              82
#define Data6D_size                              176
/* DataND_size depends on runtime parameters */
/* DataCellRss_size depends on runtime parameters */
/* DataBleRss_size depends on runtime parameters */
/* DataWifiRss_size depends on runtime parameters */
#define ReccoRss_size                            162
#define TempPhCond_size                          178
/* WrapperData_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
